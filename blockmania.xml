<?xml version="1.0" encoding="UTF-8"?>
<project name="blockmania" default="all">
    <property file="blockmania.properties"/>

    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.args" value=""/>
    <property name="compiler.max.memory" value="128m"/>
    <patternset id="ignored.files">
        <exclude name="**/CVS/**"/>
        <exclude name="**/SCCS/**"/>
        <exclude name="**/RCS/**"/>
        <exclude name="**/rcs/**"/>
        <exclude name="**/.DS_Store/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/.pyc/**"/>
        <exclude name="**/.pyo/**"/>
        <exclude name="**/*.pyc/**"/>
        <exclude name="**/*.pyo/**"/>
        <exclude name="**/.git/**"/>
        <exclude name="**/*.hprof/**"/>
        <exclude name="**/_svn/**"/>
        <exclude name="**/.hg/**"/>
        <exclude name="**/*.lib/**"/>
        <exclude name="**/*~/**"/>
        <exclude name="**/__pycache__/**"/>
        <exclude name="**/.bundle/**"/>
    </patternset>
    <patternset id="library.patterns">
        <include name="*.zip"/>
        <include name="*.war"/>
        <include name="*.egg"/>
        <include name="*.ear"/>
        <include name="*.swc"/>
        <include name="*.jar"/>
    </patternset>
    <patternset id="compiler.resources">
        <include name="**/?*.properties"/>
        <include name="**/?*.xml"/>
        <include name="**/?*.gif"/>
        <include name="**/?*.png"/>
        <include name="**/?*.jpeg"/>
        <include name="**/?*.jpg"/>
        <include name="**/?*.html"/>
        <include name="**/?*.dtd"/>
        <include name="**/?*.tld"/>
        <include name="**/?*.ftl"/>
        <include name="**/?*.glsl"/>
        <include name="**/?*.png"/>
        <include name="**/?*.ogg"/>
        <include name="**/?*.fnt"/>
        <include name="**/?*.groovy"/>
    </patternset>


    <!-- Project Libraries -->

    <path id="library.libs.classpath">
        <fileset dir="${basedir}/libs">
            <patternset refid="library.patterns"/>
        </fileset>
    </path>

    <!-- Modules -->


    <!-- Module Blockmania -->

    <dirname property="module.blockmania.basedir" file="${ant.file}"/>


    <property name="compiler.args.blockmania" value="${compiler.args}"/>

    <property name="blockmania.output.dir" value="${module.blockmania.basedir}/out/production/Blockmania"/>
    <property name="blockmania.testoutput.dir" value="${module.blockmania.basedir}/out/test/Blockmania"/>

    <path id="blockmania.module.bootclasspath">
        <!-- Paths to be included in compilation bootclasspath -->
    </path>

    <path id="blockmania.module.production.classpath">
        <path refid="library.libs.classpath"/>
    </path>

    <path id="blockmania.runtime.production.module.classpath">
        <pathelement location="${blockmania.output.dir}"/>
        <path refid="library.libs.classpath"/>
    </path>

    <path id="blockmania.module.classpath">
        <pathelement location="${blockmania.output.dir}"/>
        <path refid="library.libs.classpath"/>
    </path>

    <path id="blockmania.runtime.module.classpath">
        <pathelement location="${blockmania.testoutput.dir}"/>
        <pathelement location="${blockmania.output.dir}"/>
        <path refid="library.libs.classpath"/>
    </path>


    <patternset id="excluded.from.module.blockmania">
        <patternset refid="ignored.files"/>
    </patternset>

    <patternset id="excluded.from.compilation.blockmania">
        <patternset refid="excluded.from.module.blockmania"/>
    </patternset>

    <path id="blockmania.module.sourcepath">
        <dirset dir="${module.blockmania.basedir}">
            <include name="src"/>
        </dirset>
    </path>


    <target name="compile.module.blockmania"
            depends="compile.module.blockmania.production,compile.module.blockmania.tests"
            description="Compile module Blockmania"/>

    <target name="compile.module.blockmania.production" description="Compile module Blockmania; production classes">
        <mkdir dir="${blockmania.output.dir}"/>
        <javac destdir="${blockmania.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}"
               memorymaximumsize="${compiler.max.memory}" fork="true">
            <compilerarg line="${compiler.args.blockmania}"/>
            <bootclasspath refid="blockmania.module.bootclasspath"/>
            <classpath refid="blockmania.module.production.classpath"/>
            <src refid="blockmania.module.sourcepath"/>
            <patternset refid="excluded.from.compilation.blockmania"/>
        </javac>

        <copy todir="${blockmania.output.dir}">
            <fileset dir="${module.blockmania.basedir}/src">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.module.blockmania.tests" depends="compile.module.blockmania.production"
            description="compile module Blockmania; test classes" unless="skip.tests"/>

    <target name="clean.module.blockmania" description="cleanup module">
        <delete dir="${blockmania.output.dir}"/>
        <delete dir="${blockmania.testoutput.dir}"/>
    </target>

    <target name="init" description="Build initialization">
        <!-- Perform any build initialization in this target -->
    </target>

    <target name="clean" depends="clean.module.blockmania, clean.artifact.blockmania" description="cleanup all"/>

    <target name="build.modules" depends="init, clean, compile.module.blockmania" description="build all modules"/>

    <target name="init.artifacts">
        <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
        <property name="artifact.output.blockmania:zip" value="${basedir}/out/artifacts/dist"/>
        <property name="artifact.output.blockmania" value="${basedir}/out/artifacts/Blockmania"/>
        <property name="artifact.output.blockmania:jar" value="${basedir}/out/artifacts/Blockmania_jar"/>
        <mkdir dir="${artifacts.temp.dir}"/>
        <property name="temp.jar.path.Blockmania.jar" value="${artifacts.temp.dir}/Blockmania.jar"/>
    </target>

    <target name="clean.artifact.blockmania" depends="init.artifacts" description="clean Blockmania artifact output">
        <delete dir="${artifact.output.blockmania}"/>
    </target>

    <target name="artifact.blockmania" depends="init.artifacts, artifact.blockmania:jar"
            description="Build &apos;Blockmania&apos; artifact">
        <mkdir dir="${artifact.output.blockmania}"/>
        <copy todir="${artifact.output.blockmania}">
            <fileset dir="${artifact.temp.output.blockmania:jar}"/>
        </copy>
        <copy file="${basedir}/README.markdown" tofile="${artifact.output.blockmania}/README.markdown"/>
	<copy file="${basedir}/OpenAL32.dll" tofile="${artifact.output.blockmania}/OpenAL32.dll"/>
	<copy file="${basedir}/OpenAL64.dll" tofile="${artifact.output.blockmania}/OpenAL64.dll"/>
        <copy file="${basedir}/scripts/run_linux.sh" tofile="${artifact.output.blockmania}/run_linux.sh"/>
        <copy file="${basedir}/scripts/run_macosx.command" tofile="${artifact.output.blockmania}/run_macosx.command"/>
        <copy file="${basedir}/scripts/run_windows.bat" tofile="${artifact.output.blockmania}/run_windows.bat"/>
        <mkdir dir="${artifact.output.blockmania}/natives"/>
        <copy todir="${artifact.output.blockmania}/natives">
            <fileset dir="${basedir}/natives"/>
        </copy>
        <mkdir dir="${artifact.output.blockmania}/groovy"/>
        <copy todir="${artifact.output.blockmania}/groovy">
            <fileset dir="${basedir}/groovy"/>
        </copy>
    </target>

    <target name="artifact.blockmania:zip" depends="artifact.blockmania" description="None">
        <mkdir dir="${artifact.output.blockmania:zip}"/>
        <zip basedir="${artifact.output.blockmania}" destfile="${artifact.output.blockmania:zip}/Blockmania.zip"/>
    </target>

    <target name="artifact.blockmania:jar" depends="init.artifacts, compile.module.blockmania"
            description="Build &apos;Blockmania:jar&apos; artifact">
        <property name="artifact.temp.output.blockmania:jar" value="${artifacts.temp.dir}/Blockmania_jar"/>
        <mkdir dir="${artifact.temp.output.blockmania:jar}"/>
        <jar destfile="${temp.jar.path.Blockmania.jar}" duplicate="add" manifest="${basedir}/src/META-INF/MANIFEST.MF"
             filesetmanifest="skip">
            <zipfileset dir="${blockmania.output.dir}"/>
            <zipfileset src="${basedir}/libs/annotations.jar"/>
            <zipfileset src="${basedir}/libs/AppleJavaExtensions.jar"/>
            <zipfileset src="${basedir}/libs/javolution-5.5.1.jar"/>
            <zipfileset src="${basedir}/libs/jogg-0.0.7.jar"/>
            <zipfileset src="${basedir}/libs/jorbis-0.0.15.jar"/>
            <zipfileset src="${basedir}/libs/jinput.jar"/>
            <zipfileset src="${basedir}/libs/lwjgl.jar"/>
            <zipfileset src="${basedir}/libs/lwjgl_util.jar"/>
            <zipfileset src="${basedir}/libs/lzma.jar"/>
            <zipfileset src="${basedir}/libs/slick.jar"/>
            <zipfileset src="${basedir}/libs/slick-util.jar"/>
            <zipfileset src="${basedir}/libs/trove-3.0.0.jar"/>
            <zipfileset src="${basedir}/libs/groovy-all-1.8.2.jar"/>
            <zipfileset src="${basedir}/libs/jdom.jar"/>
            <zipfileset src="${basedir}/libs/vecmath.jar"/>
            <zipfileset src="${basedir}/libs/jbullet.jar"/>
        </jar>
        <copy file="${temp.jar.path.Blockmania.jar}" tofile="${artifact.temp.output.blockmania:jar}/Blockmania.jar"/>
    </target>

    <target name="build.all.artifacts" depends="artifact.blockmania, artifact.blockmania:jar, artifact.blockmania:zip"
            description="Build all artifacts">
        <mkdir dir="${artifact.output.blockmania:jar}"/>
        <copy todir="${artifact.output.blockmania:jar}">
            <fileset dir="${artifact.temp.output.blockmania:jar}"/>
        </copy>

        <!-- Delete temporary files -->
        <delete dir="${artifacts.temp.dir}"/>
    </target>

    <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>